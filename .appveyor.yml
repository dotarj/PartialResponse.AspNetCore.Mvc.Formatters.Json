environment:
  VERIFY_STRONG_NAME: true
  MYGET_FEED_NAME: partialresponse
  MYGET_API_KEY:
    secure: nXDnbkmLZ0yeSj623ZeiGO+be5JhivxxrgiJ9lgHLVH/PKoI52UO2Kt6965QAAM+
  NUGET_API_KEY:
    secure: CbJ7DaN2P9YI9zVjNR98Ld3gM0RXqxo91R0wLUO4PcTAVj65mF48vzMNr7JnMppM
  SONARQUBE_ORGANIZATION: dotarj-github
  SONARQUBE_TOKEN:
    secure: zmYFq7/1VpOvb/E+voAXfsRIEuekDH0gpKA89h1V4nH0TqCgKxb8G7ZVPt9mpsBB
  SONARQUBE_GITHUB_TOKEN:
    secure: R0EXcWv91EY6EVoT7NmIPXxU6ZfqIK0Rhbe2uT9pboQQT99XuVQENS1JE+izE7bI

image: Visual Studio 2019

skip_tags: false

branches:
  only:
    - master

configuration: Release

init:
- ps: |
      function Execute-Action {
          param($description, $action)

          Write-Host (Get-Date).ToString("hh:mm:ss.fff") "STARTED $description" -ForegroundColor Magenta

          &$action

          Write-Host (Get-Date).ToString("hh:mm:ss.fff") "FINISHED $description" -ForegroundColor Magenta

          if ($LastExitCode -ne 0) { $host.SetShouldExit($LastExitCode) }
      }

- ps: |
      Execute-Action "updating build version" {
         If ($env:APPVEYOR_REPO_TAG -eq $true) {
             $env:RELEASE_VERSION = $env:APPVEYOR_REPO_TAG_NAME
         }
         else {
             $env:RELEASE_VERSION = "0.0.0-ci.sha.$($env:APPVEYOR_REPO_COMMIT.Substring(0, 7)).build.$env:APPVEYOR_BUILD_NUMBER"
         }

         Write-Host "Build version:" $env:RELEASE_VERSION -ForegroundColor White

         Update-AppveyorBuild -Version $env:RELEASE_VERSION
      }

- ps: |
      Execute-Action "updating path variable" {
          $env:PATH = $env:PATH + ";C:/Program Files (x86)/Microsoft SDKs/Windows/v10.0A/bin/NETFX 4.7 Tools"
      }

install:
- ps: |
      Execute-Action "installing tools" {
          choco install codecov msbuild-sonarqube-runner opencover.portable
      }

dotnet_csproj:
  patch: true
  file: src\$(APPVEYOR_PROJECT_NAME)\$(APPVEYOR_PROJECT_NAME).csproj
  version: $(RELEASE_VERSION)

before_build:
- ps: |
      Execute-Action "restoring project dependencies" {
          dotnet restore -v m
      }

- ps: |
      Execute-Action "beginning code analysis" {
          if ($env:APPVEYOR_PULL_REQUEST_NUMBER) {
              # For security reasons, AppVeyor only exposes secure variables for pull requests from the same repositoy.
              # If $env:SONARQUBE_GITHUB_TOKEN is not set, then it is a pull request from another repository and we'll
              # skip SonarQube analysis.
              if ($env:SONARQUBE_GITHUB_TOKEN) {
                  MSBuild.SonarQube.Runner.exe begin /o:$env:SONARQUBE_ORGANIZATION /k:$env:APPVEYOR_PROJECT_NAME /v:$env:APPVEYOR_BUILD_VERSION /d:sonar.host.url=https://sonarcloud.io /d:sonar.login=$env:SONARQUBE_TOKEN /d:sonar.cs.opencover.reportsPaths=coverage.xml /d:sonar.coverage.exclusions=**/*Tests.cs,**/*Tests.*.cs,**/*Mock.cs /d:sonar.github.pullRequest=$env:APPVEYOR_PULL_REQUEST_NUMBER /d:sonar.github.repository=$env:APPVEYOR_REPO_NAME /d:sonar.github.oauth=$env:SONARQUBE_GITHUB_TOKEN

                  $env:SONARQUBE_RUNNING = $true
              }
          }
          else {
              MSBuild.SonarQube.Runner.exe begin /o:$env:SONARQUBE_ORGANIZATION /k:$env:APPVEYOR_PROJECT_NAME /v:$env:APPVEYOR_BUILD_VERSION /d:sonar.host.url=https://sonarcloud.io /d:sonar.login=$env:SONARQUBE_TOKEN /d:sonar.cs.opencover.reportsPaths=coverage.xml /d:sonar.coverage.exclusions=**/*Tests.cs,**/*Tests.*.cs,**/*Mock.cs

              $env:SONARQUBE_RUNNING = $true
          }
      }

build_script:
- ps: |
      Execute-Action "building project" {
          dotnet build -c $env:CONFIGURATION --no-restore -v m
      }

after_build:
- ps: |
      If ($env:VERIFY_STRONG_NAME -eq $true) {
          Execute-Action "verifying strong name" {
              foreach ($assembly in ls "src/$env:APPVEYOR_PROJECT_NAME/bin/$env:CONFIGURATION/*/$env:APPVEYOR_PROJECT_NAME.dll") {
                  sn.exe -vf $assembly

                  if ($LastExitCode -ne 0) { Break }
              }
          }
      }

- ps: |
      Execute-Action "creating NuGet package" {
          dotnet pack src/$env:APPVEYOR_PROJECT_NAME -c $env:CONFIGURATION --no-restore --no-build --include-symbols --output ../../artifacts -v m
      }

test_script:
- ps: |
      Execute-Action "running unit tests" {
          dotnet test test/$env:APPVEYOR_PROJECT_NAME.Tests -c $env:CONFIGURATION --no-restore --no-build -v m
      }

after_test:
- ps: |
      Execute-Action "generating code coverage report" {
          dotnet build -c $env:CONFIGURATION --no-restore -v m /p:codecov=true

          OpenCover.Console.exe -target:"$env:XUNIT20/xunit.console.x86.exe" -targetargs:"test/$env:APPVEYOR_PROJECT_NAME.Tests/bin/$env:CONFIGURATION/netcoreapp3.0/$env:APPVEYOR_PROJECT_NAME.Tests.dll -noshadow" -register:user -filter:"+[*]* -[$env:APPVEYOR_PROJECT_NAME.Tests]* -[$env:APPVEYOR_PROJECT_NAME.Samples]*" -hideskipped:All -output:"./coverage.xml"
      }

- ps: |
      Execute-Action "uploading code coverage report" {
          codecov.exe -f coverage.xml
      }

- ps: |
      Execute-Action "ending code analysis" {
          if ($env:SONARQUBE_RUNNING -eq $true) {
              MSBuild.SonarQube.Runner.exe end /d:sonar.login=$env:SONARQUBE_TOKEN
          }
      }

artifacts:
  - path: artifacts/*.nupkg
    name: NuGet

deploy:
- provider: NuGet
  server: https://www.myget.org/F/$(MYGET_FEED_NAME)/api/v2
  api_key: $(MYGET_API_KEY)
  skip_symbols: false
  symbol_server: https://www.myget.org/F/$(MYGET_FEED_NAME)/symbols/api/v2/package
  on:
    appveyor_repo_tag: false

- provider: NuGet
  api_key: $(NUGET_API_KEY)
  skip_symbols: false
  on:
    appveyor_repo_tag: true